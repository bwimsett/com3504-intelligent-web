Index: views/stories.ejs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!--\r\n Copyright 2016 Google Inc.\r\n\r\n Licensed under the Apache License, Version 2.0 (the \"License\");\r\n you may not use this file except in compliance with the License.\r\n You may obtain a copy of the License at\r\n\r\n      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n Unless required by applicable law or agreed to in writing, software\r\n distributed under the License is distributed on an \"AS IS\" BASIS,\r\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n See the License for the specific language governing permissions and\r\n limitations under the License.\r\n-->\r\n\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"utf-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <link rel=\"canonical\" href=\"https://weather-pwa-sample.firebaseapp.com/final/\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Stories</title>\r\n    <link rel=\"stylesheet\" href=\"/styles/bootstrap.min.css\">\r\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"styles/stories.css\">\r\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"styles/likes.css\">\r\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"styles/inline.css\">\r\n\r\n    <link rel=\"manifest\" href=\"/manifest.json\">\r\n    <!-- Add to home screen for Safari on iOS -->\r\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\r\n    <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\">\r\n    <meta name=\"apple-mobile-web-app-title\" content=\"Weather PWA\">\r\n    <link rel=\"apple-touch-icon\" href=\"images/icons/icon-152x152.png\">\r\n    <meta name=\"msapplication-TileImage\" content=\"images/icons/icon-144x144.png\">\r\n    <meta name=\"msapplication-TileColor\" content=\"#2F3BA2\">\r\n\r\n    <!-- Latest compiled JavaScript -->\r\n    <script src=\"/scripts/jquery.min.js\"></script>\r\n    <script src=\"/scripts/popper.min.js\"></script>\r\n    <script src=\"/scripts/bootstrap.min.js\"></script>\r\n    <script src=\"/scripts/idb.js\"></script>\r\n    <script src=\"/scripts/likes.js\"></script>\r\n    <script src=\"/scripts/stories.js\"></script>\r\n    <script src=\"/scripts/app.js\"></script>\r\n    <script src=\"/scripts/database.js\"></script>\r\n\r\n</head>\r\n<body onload=\"initStories(), reIfLogged()\">\r\n\r\n\r\n<nav class=\"navbar navbar-expand-lg  navbar-dark bg-dark\">\r\n    <a class=\"navbar-brand\" href=\"/home\">Social Media App</a>\r\n    <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span class=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul class=\"navbar-nav mr-auto\">\r\n            <li>\r\n                <a class=\"nav-link\" href=\"./home\">Home</a>\r\n            </li>\r\n            <li>\r\n                <a class=\"nav-link\" href=\"./likes\">Likes</a>\r\n            </li>\r\n            <li>\r\n                <a class=\"nav-link\" onclick=\"logout()\", href=\"#\">Logout</a>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n</nav>\r\n\r\n<div class=\"container\" style=\"width: 100%\">\r\n\r\n    <div class=\"page-header\"><h1>Story Feed</h1></div>\r\n\r\n    <form>\r\n        <label for=\"New Story\">Create a new story</label>\r\n        <textarea class=\"form-control\" id=\"newstory\" rows=\"3\" cols=\"50\"></textarea>\r\n        <br>\r\n        <button type=\"button\" class=\"btn btn-primary\" onclick=\"createPost()\">Create Post</button>\r\n    </form>\r\n\r\n\r\n    <div id=\"storyContainer\">\r\n    </div>\r\n</div>\r\n\r\n\r\n</body>\r\n\r\n</html>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- views/stories.ejs	(revision 26812b0154a93803870f802e9f58181da24085d8)
+++ views/stories.ejs	(date 1590576651452)
@@ -47,7 +47,7 @@
     <script src="/scripts/database.js"></script>
 
 </head>
-<body onload="initStories(), reIfLogged()">
+<body onload="initStories(), reIfLogged(), getSortingMethod()">
 
 
 <nav class="navbar navbar-expand-lg  navbar-dark bg-dark">
@@ -78,11 +78,20 @@
         <label for="New Story">Create a new story</label>
         <textarea class="form-control" id="newstory" rows="3" cols="50"></textarea>
         <br>
-        <button type="button" class="btn btn-primary" onclick="createPost()">Create Post</button>
+        <button type="button" class="btn btn-primary" onclick="createPost()" >Create Post</button>
+
     </form>
+    <br><br>
 
-
+    <div>
+        <select id="toggle" name="toggle" onchange="setSortingMethod()" >
+            <option value="date">date</option>
+            <option value="recommended">recommended</option>
+        </select>
+    </div>
+    <br>
     <div id="storyContainer">
+
     </div>
 </div>
 
Index: public/scripts/app.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\r\n * called by the HTML onload\r\n * showing any cached stories and declaring the service worker\r\n */\r\nfunction initStories() {\r\n    // First load the data.\r\n    loadData();\r\n\r\n\r\n    // This is uncommented until the database is fully implemented.\r\n    // loadData();\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker\r\n            .register('./service-worker.js')\r\n            .then(function () {\r\n                console.log('Service Worker Registered');\r\n            })\r\n            .catch (function (error){\r\n                console.log('Service Worker NOT Registered '+ error.message);\r\n            });\r\n    }\r\n    //check for support\r\n    if ('indexedDB' in window) {\r\n        initDatabase();\r\n    }\r\n    else {\r\n        console.log('This browser doesn\\'t support IndexedDB');\r\n    }\r\n\r\n    displayCachedStories();\r\n}\r\n\r\n/**\r\n * given a list of users, retrieve all the data from the server (or failing that) from the database.\r\n */\r\nfunction loadData(){\r\n    refreshCachedUsers();\r\n    retrieveAllStoryData();\r\n}\r\n\r\n/**\r\n * Cycles through the list of users and requests a story (or stories) from the server for each\r\n * user.\r\n */\r\nfunction retrieveAllStoryData(){\r\n    loadLikes();\r\n    loadStories();\r\n}\r\n\r\n/**\r\n * Returns all the stories and associated users\r\n * @param user\r\n */\r\nfunction loadStories(){\r\n    $.ajax({\r\n        url: '/stories',\r\n        contentType: 'application/json',\r\n        type: 'POST',\r\n        success: function (dataR) {\r\n            if(dataR == null){\r\n                return;\r\n            }\r\n\r\n            // Clear the story cache, then fill it with the newly returned data\r\n            clearCachedStories(function(){\r\n                var dataValue = dataR;\r\n\r\n                // Store the result data in a card on the page\r\n                $.each(dataR, function(index, element) {\r\n                    console.log(element);\r\n                    cacheStory(element);\r\n                });\r\n            })\r\n\r\n            // Hide the 'offline' alert, as server request was successful\r\n            /*if (document.getElementById('offline_div')!=null)\r\n                    document.getElementById('offline_div').style.display='none';*/\r\n        },\r\n\r\n        // If the server request fails, show the cached data instead.\r\n        error: function (xhr, status, error) {\r\n            showOfflineWarning();\r\n            displayCachedStories();\r\n\r\n            // Show the 'offline' alert\r\n            const dvv= document.getElementById('offline_div');\r\n            if (dvv!=null)\r\n                    dvv.style.display='block';\r\n        }\r\n    });\r\n\r\n    // Anything that happens after the ajax request goes here\r\n\r\n}\r\n\r\n/**\r\n * Returns all the stories and associated users\r\n * @param user\r\n */\r\nfunction loadLikes(){\r\n    $.ajax({\r\n        url: '/retrieve_likes',\r\n        contentType: 'application/json',\r\n        type: 'POST',\r\n        success: function (dataR) {\r\n            if(dataR == null){\r\n                return;\r\n            }\r\n\r\n            // Clear the cache, then fill it with the newly returned data\r\n            clearCachedLikes(function(){\r\n                var dataValue = dataR;\r\n\r\n                $.each(dataR, function(index, element) {\r\n                    cacheLike(element);\r\n                });\r\n            })\r\n\r\n            // Hide the 'offline' alert, as server request was successful\r\n            /*if (document.getElementById('offline_div')!=null)\r\n                    document.getElementById('offline_div').style.display='none';*/\r\n        },\r\n\r\n        // If the server request fails, show the cached data instead.\r\n        error: function (xhr, status, error) {\r\n            showOfflineWarning();\r\n            displayCachedStories();\r\n\r\n            // Show the 'offline' alert\r\n            const dvv= document.getElementById('offline_div');\r\n            if (dvv!=null)\r\n                dvv.style.display='block';\r\n        }\r\n    });\r\n\r\n    // Anything that happens after the ajax request goes here\r\n\r\n}\r\n\r\nfunction refreshCachedUsers(){\r\n    $.ajax({\r\n        url: '/users_list',\r\n        contentType: 'application/json',\r\n        type: 'POST',\r\n        success: function (dataR) {\r\n\r\n            // Add the data to the cache (currently accepts a single story)\r\n            cacheUsers(dataR);\r\n\r\n            // Hide the 'offline' alert, as server request was successful\r\n            /*if (document.getElementById('offline_div')!=null)\r\n                document.getElementById('offline_div').style.display='none';*/\r\n        },\r\n\r\n        // If the server request fails, show the cached data instead.\r\n        error: function (xhr, status, error) {\r\n            showOfflineWarning();\r\n            displayCachedStories();\r\n\r\n            // Show the 'offline' alert\r\n            const dvv= document.getElementById('offline_div');\r\n            if (dvv!=null)\r\n                dvv.style.display='block';\r\n        }\r\n    });\r\n\r\n    // Anything that happens after the ajax request goes here\r\n}\r\n\r\n\r\n/**\r\n * Posts a story to /stories_list using ajax.\r\n */\r\nfunction sendStory(story){\r\n    const data = JSON.stringify(story);\r\n\r\n    $.ajax({\r\n        url: '/stories_list',\r\n        data: data,\r\n        contentType: 'application/json',\r\n        type: 'POST',\r\n        success: function (dataR) {\r\n            // Display the output on the screen\r\n            console.log(\"response received\");\r\n\r\n            // Cache the data for offline viewing\r\n            cacheStory(dataR, function () {\r\n                displayCachedStories();\r\n            });\r\n\r\n            // Hide the offline alert\r\n            if (document.getElementById('offline_div')!=null)\r\n                document.getElementById('offline_div').style.display='none';\r\n        },\r\n\r\n        // the request to the server has failed. Display the cached data instead.\r\n        error: function (xhr, status, error) {\r\n            showOfflineWarning();\r\n            console.log(\"ajax post failed\",error);\r\n            //getCachedData(city, date);\r\n            const dvv= document.getElementById('offline_div');\r\n            if (dvv!=null)\r\n                dvv.style.display='block';\r\n        }\r\n    });\r\n\r\n    // Anything that happens after the ajax request goes here\r\n\r\n    // Prevent the page from refreshing and clearing the posts just loaded\r\n    event.preventDefault();\r\n}\r\n\r\n\r\n///////////////////////// INTERFACE MANAGEMENT ///////////////////////////\r\n\r\n/**\r\n * @param text\r\n */\r\nclass Story{\r\n    constructor(text, user_id){\r\n        this.text = text;\r\n        this.user_id = user_id;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Creates a new post from the form and stores it in local storage\r\n */\r\nfunction createPost(){\r\n    var postList = JSON.parse(localStorage.getItem('posts'));\r\n    if(postList == null){\r\n        postList = [];\r\n    }\r\n\r\n    var formContents = $('#newstory').val();\r\n    var currentUser = JSON.parse(getCurrentUser());\r\n    var newPost = new Story(formContents, currentUser._id);\r\n\r\n\r\n    console.log(\"creating post with text: \"+formContents);\r\n    postList.push(newPost)\r\n    localStorage.setItem('posts', JSON.stringify(postList));\r\n    // Create ajax request to send new story and refresh page\r\n    sendStory(newPost);\r\n    return false;\r\n}\r\n\r\n\r\n/////////////////////////////////// LOGINS //////////////////////////////////\r\n\r\nclass User{\r\n    constructor(username, password){\r\n        this.username = username;\r\n        this.password = password;\r\n    }\r\n}\r\n\r\nfunction loggedIn(){\r\n    var currentUser=localStorage.getItem('currentUser');\r\n    return !(currentUser==null);\r\n}\r\n\r\nfunction reIfLogged(){\r\n    var pathname = window.location.pathname;\r\n    if (pathname == \"/register\" || pathname == \"/login\" || pathname == \"/\"){\r\n        if(loggedIn()){\r\n            window.location.replace(\"./home\");\r\n        }\r\n    }else{\r\n        if(!loggedIn()){\r\n            window.location.replace(\"./\");\r\n        }\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nfunction logout(){\r\n    localStorage.removeItem(\"currentUser\");\r\n    window.location.replace(\"./\");\r\n\r\n}\r\n\r\nfunction getCurrentUser(){\r\n    var currentUser = localStorage.getItem('currentUser');\r\n    return currentUser;\r\n}\r\n\r\nfunction login() {\r\n    var un = $('#username').val();\r\n    var pw = $('#password').val();\r\n    var user = new User(un, pw);\r\n    if (!loggedIn()) {\r\n        loginUser(user);\r\n        console.log('attempting to login user: '+ user.username);\r\n    }else{\r\n        window.location.replace(\"./home\");\r\n        console.log(\"already logged in.... \");\r\n    }\r\n}\r\n\r\nfunction register(){\r\n    var un = $('#username').val();\r\n    var pw = $('#password').val();\r\n    var user = new User(un, pw);\r\n    addUser(user)\r\n}\r\n\r\nfunction addUser(user){\r\n    var data = JSON.stringify(user);\r\n    $.ajax({\r\n        url: '/register',\r\n        data: data,\r\n        contentType: 'application/json',\r\n        type: 'POST',\r\n        success: function (response) {\r\n            console.log(\"register sucessful, ID: \"+user._id);\r\n            alert(\"register successful\");\r\n            window.location.reload();\r\n        },\r\n\r\n        // the request to the server has failed. Display the cached data instead.\r\n        error: function (xhr, status, error) {\r\n            console.log(\"ajax post failed\",error);\r\n        }\r\n    });\r\n}\r\n\r\nfunction loginUser(user){\r\n    var data = JSON.stringify(user);\r\n    console.log(\"running data\" + data);\r\n    $.ajax({\r\n        url: '/login',\r\n        data: data,\r\n        contentType: 'application/json',\r\n        type: 'POST',\r\n        success: function (response) {\r\n            if (response == null){\r\n               alert(\"incorrect details\");\r\n            }else{\r\n                window.location.reload();\r\n                localStorage.setItem('currentUser', JSON.stringify(response));\r\n\r\n                console.log(\"USER LOGGING IN: \"+response._id);\r\n                window.location.replace(\"./home\");\r\n            }\r\n\r\n            //findUser(user);\r\n            // Display the output on the screen\r\n            console.log(\"response received logging in ----\");\r\n\r\n        },\r\n\r\n        // the request to the server has failed. Display the cached data instead.\r\n        error: function (xhr, status, error) {\r\n            console.log(\"server request failed\",error);\r\n            loginUserOffline(user);\r\n            window.location.reload();\r\n\r\n\r\n        }\r\n    });\r\n}\r\n\r\n\r\n/**\r\n * When the client goes offline, show an offline warning for the user\r\n */\r\nwindow.addEventListener('offline', function(e) {\r\n    // Queue up events for server.\r\n    console.log(\"You are offline\");\r\n    showOfflineWarning();\r\n}, false);\r\n\r\n/**\r\n * When the client gets online, hide the offline warning\r\n */\r\nwindow.addEventListener('online', function(e) {\r\n    // Resync data with server.\r\n    console.log(\"You are online\");\r\n    hideOfflineWarning();\r\n    loadData();\r\n}, false);\r\n\r\n\r\nfunction showOfflineWarning(){\r\n    if (document.getElementById('offline_div')!=null)\r\n        document.getElementById('offline_div').style.display='block';\r\n}\r\n\r\nfunction hideOfflineWarning(){\r\n    if (document.getElementById('offline_div')!=null)\r\n        document.getElementById('offline_div').style.display='none';\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- public/scripts/app.js	(revision 26812b0154a93803870f802e9f58181da24085d8)
+++ public/scripts/app.js	(date 1590576651461)
@@ -137,6 +137,19 @@
 
 }
 
+function setSortingMethod(){
+    var toggle = $('#toggle').val();
+    localStorage.setItem('toggle', JSON.stringify(toggle));
+    console.log(JSON.stringify(toggle))
+    window.location.reload();
+}
+
+function getSortingMethod() {
+    var toggle = JSON.parse(localStorage.getItem('toggle'));
+    console.log(toggle)
+    $('#toggle').val(toggle);
+}
+
 function refreshCachedUsers(){
     $.ajax({
         url: '/users_list',
